import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

passengers = pd.read_csv('passengers.csv')
passengers.head()

print("Before mapping")
print(passengers['Sex'].head())

passengers["Sex"] = passengers["Sex"].map({'male':0, 'female':1})

print("\n")

print("After mapping")
print(passengers['Sex'].head())

print("Before update")
print(passengers["Age"].head(10))

passengers["Age"].fillna(inplace=True, value=round(passengers["Age"].mean()))
print("\n")

print("After update")
passengers["Age"].head(10)

passengers["FirstClass"] = passengers['Pclass'].apply(lambda x: 1 if x==1 else 0)
print(passengers[['Pclass','FirstClass']].head())

passengers['SecondClass'] = passengers['Pclass'].apply(lambda x: 1 if x==2 else 0)
print(passengers[['Pclass','SecondClass']].head())

passengers['ThirdClass'] = passengers['Pclass'].apply(lambda x: 1 if x==3 else 0)
print(passengers[['Pclass','ThirdClass']].head())

# store the columns in a variable
# separate the result to another variable

features = passengers[['Sex','Age','FirstClass','SecondClass']]
survival = passengers['Survived']

train_features, test_features, train_labels, test_labels = train_test_split(features, survival)
scaler = StandardScaler()

train_features = scaler.fit_transform(train_features)
print(train_features[:10])

test_features = scaler.fit_transform(test_features)
print(test_features[:10])

model = LogisticRegression()
model.fit(train_features, train_labels)

print(model.score(train_features, train_labels))

print(model.coef_)

# Jack and Rose are data from the main actor and actress from the Titanic movie
# You is imaginary data 
Jack = np.array([0.0,20.0,0.0,0.0])
Rose = np.array([1.0,17.0,1.0,0.0])
You = np.array([1.0,35,0.0,1.0])

# combine the data into a single numpy array
sample_passengers = np.array([Jack, Rose, You])

# scale the data since we did same for the data above
sample_passengers = scaler.transform(sample_passengers)

# use the model to predict survival
print(model.predict(sample_passengers))
